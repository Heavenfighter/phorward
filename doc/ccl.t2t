


The pccl object is established on top of the parray object and encapsulates easy-to-handle low-level functions for character-class handling.

These functions are heavily used by the library's regular expression facilities, but may also be helpful for other related projects. pccl can handle character classes, by chaining ranges, and optimizing intersections between them.

pccl supports a fully-fledged set theory automatism, including construction of intersections, unions, range removal or appending. pccl objects are designed to work on huge alphabets with low memory consumption. By default, characters are specified as **wchar_t** (wide-character unicode) values.

Primary functions overview:

- @pccl_create() - create and optionally parse a new character-class,
- @pccl_parse() - parse characters and ranges from a string into a character-class,
- @pccl_negate() - negate a character-class over the character universe,
- @pccl_add(), @pccl_addrange() - add single characters or ranges to the class,
- @pccl_del(), @pccl_delrange() - delete single characters or ranges from the class,
- @pccl_test(), @pccl_testrange() - test if a character or range matches a class,
- @pccl_to_str() - convert a character-class into a string,
- @pccl_free() - destroy a previously created character-class,
-

```
pccl* ccl;

/* Construct a character-class within a universe of the ASCII-alphabet (0-255):
	"-0123456789ABCDEFGHIJKLMNOQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz"
*/
ccl = pccl_create( 0, 255, "A-Za-z0-9_-" );

/* Invert character class */
pccl_negate( ccl );

/* Remove ASCII system chars */
pccl_delrange( ccl, 0, 31 );

/* Oh, and delete the "z" */
pccl_del( ccl, 'z' );

/* But add tab again! */
pccl_add( ccl, '\t' );

/* Enable all from ASCII 32 to 126  */
pccl_addrange( ccl, ' ', '~' );

/* Alternative way: */
pccl_parse( ccl, " -~", TRUE );

/* Test for characters */
printf( "A is in? %s\n", BOOLEAN_STR( pccl_test( ccl, 'A' ) );
printf( "a-z are in? %s\n", BOOLEAN_STR( pccl_testrange( ccl, 'a', 'z' ) );
printf( "\\n is in? %s\n", BOOLEAN_STR( pccl_test( ccl, '\n' ) );

/* Generate string */
printf( "My ccl is: %s\n", pccl_to_str( ccl, TRUE ) );

/* Drop it! */
pccl_free( ccl );
```

Additional functions when working with pccl are:

- @pccl_compare() - compare character-classes,
- @pccl_diff() - create differencing character-class of two classes,
- @pccl_erase() - clear character-class,
- @pccl_get() - retrieve characters or ranges by offset,
- @pccl_instest() - like @pccl_test(), but with insensitve-character check,
- @pccl_intersect() - create intersection character-class of two classes,
- @pccl_print() - print character-class (for debug),
- @pccl_parsechar() - parse an escaped character sequence into a wide-character,
- @pccl_parseshorthand() - parse a typical shorthand (\d, \w) into a character-class.
-
