The Phorward C/C++ Library and Toolkit
libphorward 1.0.2
Jul 2020

%!preproc(html): '@([a-zA-Z0-9_]+)((\(\))?)' '[\1\2 #fn_\1]'
%!preproc(html): '([^\[])(pboolean|plist|plistel|parray|pccl|prange|pregex|pregex_ptn|plex)([-,.* \t])' '\1[\2 #\2]\3'
%!preproc(html): '%NEED:(\d+)' "''' <!-- NEED \1 -->"
%!preproc(html): '%FUNCTION:BEGIN' "''' <div class='function'>"
%!preproc(html): '%FUNCTION:END' "''' </div>"
%!preproc(html): '%DEFINITION:BEGIN' "''' <div class='definition'>"
%!preproc(html): '%DEFINITION:END' "''' </div>"

%!postproc(html): '[$]NEWPAGE[$]' '<div class="page-break"></div>'
%!postproc(html): '\(C\)' '&copy;'
%!postproc(html): '(<pre>)' '\1<code class="language-c">'
%!postproc(html): '(</pre>)' '</code>\1'
%!postproc(html): '(</head>)' '<link rel="stylesheet" type="text/css" href="prism.css" />\n<script src="prism.js"></script>\n\1'
%!postproc(html): '\[(p\w+) #p\w+\]' '\1'

%!preproc(md): '= Table of Contents =' ''
%!preproc(md): '[$]NEWPAGE[$]' ''

%-------------------------------------------------------------------------------

= Table of Contents =

%%toc



%-------------------------------------------------------------------------------
= Introduction =

**phorward** (//libphorward//) is a generic C/C++ library and toolbox, serving platform-independent utilities for different purposes.

- Data structures
    - parray - Dynamically managed arrays & stacks
    - pccl - Character-classes
    - plex - Lexical analyzers
    - plist - Linked lists, hash-tables, queues & stacks
    - pregex - Regular expressions
    -
- Generic helpers
    - [DEBUG-facilities #ptrace] - Logging, tracing and run-time analysis
    - [pgetopt #fn_getopt] - Command-line options interpreter
    - [pstr*, pwcs* #pstr] - Enhanced string operations
    -
- Command-line tools
    - [pdoc #c_pdoc] - C source code documentation tool
    - [pinclude #c_pinclude] - Generate big files from various smaller ones
    - [plex #c_plex] - Lexical analyzer generator and interpreter
    - [pproto #c_pproto] - C function prototype generator
    - [pregex #c_pregex] - Regular expressions match/find/split/replace
    - [ptest #c_ptest] - C program test facilities
    -
-

The cornerstone for this C functions library was already laid in 2006 during some experimenting with several algorithms, data structures and their implementation. It rapidly turned out to become a general purpose library serving as the base toolchain for several, unfortunately mostly unfinished software projects which had their origin at //J.M.K S.F. Software Technologies//, which was later renamed to //Phorward Software Technologies//.

The library was then released as version 0.16 to the public in 2011, together with the open source parser generator [UniCC http://unicc.phorward-software.com/]. It was initially planned to use the library for other C-based software projects having their origin at Phorward Software Technologies also, but most of them where not continued, abandoned or evolved into other directions.

In 2019, the library was finally officially released as version 1.0, and will now be continued in several ways.


%-------------------------------------------------------------------------------

= Installation =

== Building from sources ==

Building the Phorward C/C++ Library is as simple as every GNU-style open source program. Extract the release tarball or clone the Git repository into a directory of your choice.

Then, run

``` $ ./configure

to configure the build-system and generate the Makefiles for your current platform. After successful configuration, run

``` $ make

and

``` $ make install

(properly as root), to install the toolkit into your system.

== Local development build ==

Alternatively, there is also a simpler method for setting up a local build system for development and testing purposes.

To do so, type

```
$ make -f Makefile.gnu make_install
$ make
```

This locally compiles the library or parts of it, and is ideal for development purposes.

== Building on Windows ==

On Windows systems, the usage of Cygwin, Msys2, or another Unix shell environment is required.

The Phorward C/C++ Library also perfectly cross-compiles on Linux using the MinGW and MinGW_x86-64 compilers.

```
# To compile into 32-Bit Windows executables, configure with
$ ./configure --host=i486-mingw32 --prefix=/usr/i486-mingw32

# To compile into 64-Bit Windows executables, configure with
$ ./configure --host=x86_64-w64-mingw32 --prefix=/usr/x86_64-w64-mingw32
```

%-------------------------------------------------------------------------------

= Command-line tools =

The Phorward C/C++ Library provides some useful command-line tools which can also be used or forked.

=== pdoc - C source code documentation tool ===[c_pdoc]

**pdoc** is a tool to build documentation from C source code.

```
Usage: pdoc OPTIONS file...

    -d  --depth     DEPTH    Enforce headline level DEPTH (default:1)
    -h  --help               Show this help, and exit.
    -V  --version            Show version info and exit.

```

pdoc currently is only used for libphorward's own library documentation, but can also be used as a base for similar documentation tools. It reads source code with C function definitions and preceding comments of the form

```
/**
This is a neat function.

It does something, and you //can// use txt2tags-relating formatting here, and
later run the result through txt2tags.
*/
int myLittleFunction( parray* a )
{
    ...
}
```

=== pinclude - Generate big files from various smaller ones ===[c_pinclude]

**pinclude** is some kind of simple pre-processor to generate one big file from various smaller ones.

```
Usage: pinclude OPTIONS file...

    -b  --begin     STRING   Configure block comment begin to STRING (/*)
    -e  --end       STRING   Configure block comment end to STRING (*/)
    -h  --help               Show this help, and exit.
    -l  --line      STRING   Configure line comment begin to STRING ()
    -q  --quiet              Disable commented output
    -V  --version            Show version info and exit.

```

$NEWPAGE$
=== plex - Lexical analyzer generator and interpreter ===[c_plex]

**plex** is a command-line tool to construct and run lexical analyzers. It returns a list of tokens on success to stdout, and aims to be used in combination with shell scripts for lexical analysis.

```
Usage: plex OPTIONS patterns...

   -b  --begin     STRING    Use STRING as result begin separator
                             (' >' is default)
   -e  --end       STRING    Use STRING as result end separator
                             ('<\n' is default)
   -f  --file      FILENAME  Read input from FILENAME
   -h  --help                Show this help, and exit.
   -i  --input     INPUT     Use string INPUT as input.
   -V  --version             Show version info and exit.

```

Example call:
```
plex -b ":" -e "\n" -i "123 abc456    78xy9" "\d+" "[a-z]+"
1:123
2:abc
1:456
1:78
2:xy
1:9
```

=== pproto - C function prototype generator ===[c_pproto]

**pproto** generates C function prototypes from C source code.

```
Usage: pproto OPTIONS file...

    -h  --help               Show this help, and exit.
    -n  --no-comments        Disable output of comments between files
    -s  --with-static        Output static declarations also
    -S  --only-static        Output static declarations only
    -V  --version            Show version info and exit.

```

It can be seen as a very simple implementation of the well-known //cproto// command-line tool. It only accepts ANSI C functions as input. It recognizes #ifdef/#ifndef/#if/#endif-preprocessor directives around functions and emits them in the same manner to the output.

$NEWPAGE$
=== pregex - Regular expression operations ===[c_pregex]

**pregex** is a command-line tool for regular expression operations on files and strings. It can be used for match, find, split and replace actions.

```
Usage: pregex OPTIONS {expression} input

   -a  --action    ACTION    Perform regular expression action:
                             match (default), find, split, replace
   -d  --delimiter STRING    Use STRING as result delimiter
                             (newline is default)
   -D                        Dump constructed DFA
   -e  --exec      EXPR      Use string EXPR as expression.
   -f  --file      FILENAME  Read expression from FILENAME
   -h  --help                Show this help, and exit.
   -i  --input     INPUT     Use string INPUT as input.
   -r  --replace   STRING    Replacement string for 'replace' action.
   -V  --version             Show version info and exit.

```

Example call:
```
$ pregex -a find "\d+|[a-z]+" "123 abc456    78xy9"
123
abc
456
78
xy
9
```

$NEWPAGE$
=== ptest - C program test facilities ===[c_ptest]

**ptest** extracts test-cases (source snippets) from C code, compiles them, executes them and compares their result against a given output. If the output differs, the test failed, otherwise it succeeds.

```
Usage: ptest OPTIONS file...

    -D  --debug              Print test case outputs
    -h  --help               Show this help, and exit.
    -k  --keep               Keep generates files (for debugging)
    -V  --version            Show version info and exit.
```

Example for a test case. Test-cases are defined as comments in the C source.

```
/*TESTCASE:parray_union
#include <phorward.h>

void dump( parray* a, void* p )
{
	printf( "%c%s", *((char*)p), p == parray_last( a ) ? "\n" : "" );
}

void testcase()
{
	parray  a;
	parray  b;

	parray_init( &a, sizeof( char ), 0 );
	parray_init( &b, sizeof( char ), 0 );

	parray_push( &a, "a" );
	parray_push( &a, "b" );
	parray_push( &a, "c" );

	parray_push( &b, "a" );
	parray_push( &b, "d" );

	parray_iter( &a, dump );
	parray_iter( &b, dump );

	printf( "%ld\n", parray_union( &b, &a ) );

	parray_iter( &a, dump );
	parray_iter( &b, dump );
}
---
abc
ad
2
abc
adbc
*/
```

%-------------------------------------------------------------------------------

= General functions & dynamic data structures  =

== Advanced memory management ==

The standard memory management functions can be replaced by these pendants:

- @pmalloc() - allocate and zero-intialize memory, stop on error.
- @prealloc() - reallocate memory, stop on error.
- @pfree() - free memory and return (void*)NULL pointer.
- @pmemdup() - shorthand for a malloc() with memcpy().
-

These functions are used throughout libphorward's internal object mapping functions.

== Boolean data type ==[pboolean]

libphorward makes heavy usage of the self-hosted data-type **pboolean**, which is also referenced by a define //BOOLEAN//, and the constants //TRUE// and //FALSE//.

It is known, that several header files and projects define these constants on their own, so that **pboolean**, the data-type, exists on its own using the p-prefix, but any of the defines are conditionally flagged with

```
#ifndef TRUE
#define TRUE					1
#endif
```

within ``phorward.h``.

See also

- @BOOLEAN_STR() - converts a boolean expression into a string.
- @MAKE_BOOLEAN() - converts a boolean expression into a real pboolean TRUE or FALSE.
-

$NEWPAGE$
== Debugging and tracing ==[ptrace]

Although this option is not widely used in modern C/C++ projects, libphorward offers an own debug and trace facility that can be turned on for modules to detect bugs or view the program trace.

For this, the library provides the following macros:

- @LOG() - message logging with printf-style formatting
- @MSG() - message logging (older style)
- @PROC() - starting macro marking a functions entry point,
- @PARMS() - log function parameters,
- @RETURN() - return a value
- @VARS() - log variables,
- @VOIDRET - return from a void function.
-

So when a function is written like this in libphorward's way:

```
int faculty( int x )
{
	int ret;

	PROC( "faculty" );
	PARMS( "x", "%d", x );

	if( x < 0 )
	{
		WRONGPARAM;
		RETURN( -1 );
	}
	else if( x == 0 )
	{
		MSG( "x is 0, so faculty is 1" );
		RETURN( 1 );
	}
	else
	{
		MSG( "Calling faculty recursively with:" );
		VARS( "x - 1", "%d", x - 1 );
		ret = x * faculty( x - 1 );
	}

	VARS( "ret", "%d", ret );
	RETURN( ret );
}
```

Trace is written to stderr, and will be compiled into the executable code if the DEBUG preprocessor-flag is defined with a value > 0.

Calling this function with

``` faculty( 3 );

yields in a debug log

```
(faculty.c           :    7 0.000000) .ENTRY   : faculty
(faculty.c           :    8 0.000108) .PARMS   : x = >3<
(faculty.c           :   22 0.000055) .MSG     : Calling faculty recursively with:
(faculty.c           :   23 0.000042) .VARS    : x - 1 = >2<
(faculty.c           :    7 0.000039) ..ENTRY   : faculty
(faculty.c           :    8 0.000058) ..PARMS   : x = >2<
(faculty.c           :   22 0.000054) ..MSG     : Calling faculty recursively with:
(faculty.c           :   23 0.000045) ..VARS    : x - 1 = >1<
(faculty.c           :    7 0.000048) ...ENTRY   : faculty
(faculty.c           :    8 0.000078) ...PARMS   : x = >1<
(faculty.c           :   22 0.000072) ...MSG     : Calling faculty recursively with:
(faculty.c           :   23 0.000058) ...VARS    : x - 1 = >0<
(faculty.c           :    7 0.000048) ....ENTRY   : faculty
(faculty.c           :    8 0.000072) ....PARMS   : x = >0<
(faculty.c           :   17 0.000075) ....MSG     : x is 0, so faculty is 1
(faculty.c           :   18 0.000098) ....CLOCK   : faculty : 0.000155
(faculty.c           :   18 0.000087) ....RETURN  : faculty
(faculty.c           :   27 0.000068) ...VARS    : ret = >1<
(faculty.c           :   28 0.000070) ...CLOCK   : faculty : 0.000399
(faculty.c           :   28 0.000069) ...RETURN  : faculty
(faculty.c           :   27 0.000057) ..VARS    : ret = >2<
(faculty.c           :   28 0.000067) ..CLOCK   : faculty : 0.000592
(faculty.c           :   28 0.000059) ..RETURN  : faculty
(faculty.c           :   27 0.000052) .VARS    : ret = >6<
(faculty.c           :   28 0.000051) .CLOCK   : faculty : 0.000755
(faculty.c           :   28 0.000086) .RETURN  : faculty
```

when previously setting the environment variable ``TRACEMODULE="demo.c"`` or ``TRACEFUNCTION="faculty"``.

$NEWPAGE$
The following environment variables can be used when running programs using libphorward and compiled with ``-DDEBUG``:

|| Environment Variable | Example | Usage |
| ``TRACEMODULE`` | ``TRACEMODULE="faculty.c main.c"`` | Trace full C program module; multiple modules can be specified. Can be set to ``*`` to emit trace in ALL modules! |
| ``TRACEFUNCTION`` | ``TRACEFUNCTION="faculty plist_insert"`` | Trace only the functions specified. Can be set to ``*`` to emit trace of ALL functions! |
| ``TRACETYPE`` | ``TRACETYPE="ENTRY LOG RETURN"`` | Only print trace types given, ignore any other types. Can be set to ``*`` to emit all trace types (default) |
| ``TRACEDEPTH`` | ``TRACEDEPTH=5`` | Maximum trace depth, stop emitting trace when behind this level depth. |
| ``TRACEINDENT`` | ``TRACEINDENT=OFF`` | Enable/disable trace indentation; If switched OFF, the dots indicating the trace level depth are not emitted. |

$NEWPAGE$
== System-related, platform-independent helpers ==

The Phorward C/C++ Library provides some useful functions for system-related but platform independent operations.

- @pbasename() returns the basename of a path (the last part),
- @pfiletostr() reads the content of an entire file into a dynamically allocated char*,
- @pfileexists() checks for file existence,
- @pgetline() serves as a platform independent getline(),
- @pgetopt() provides a simple to use, but effective GNU-style command-line argument parser,
- @pwhich() checks for a file using @pfileexists() in a PATH-like, delimited search path definition
-

$NEWPAGE$
== Dynamically managed arrays & stacks (parray)==[parray]

%!include: array.t2t

$NEWPAGE$
== Linked lists, hash-tables, queues & stacks (plist) ==[plist]

%!include: list.t2t

$NEWPAGE$
== Character-classes (pccl) ==[pccl]

%!include: ccl.t2t

%-------------------------------------------------------------------------------

= Regular expressions & lexical analyzers (pregex, plex) =

%!include: regex.t2t

%-------------------------------------------------------------------------------

= String helper functions (pstr*, pwcs*) =[pstr]

libphorward provides a set of functions for extended, dynamic string memory handling. These functions are named according to their standard C library counterparts with an added prefix ("p"), or introduce entirely new features.

String functions overview:

- @pstrcasecmp() - case-insensitive string comparison,
- @pstrcatchar() - append character to string with dynamic allocation,
- @pstrcatstr() - append string to string with dynamic allocation,
- @pstrdup() - duplicate string, also accepts NULL-pointers,
- @pstrget() - securely get string from a pointer,
- @pstrlen() - return length of string, also accepts NULL-pointers,
- @pstrltrim() - remove prefixing whitespace,
- @pstrlwr() - convert string to lower-case-order,
- @pstrncasecmp() - case-insensitive string comparison over maximum length,
- @pstrncatstr() - append string to string with dynamic allocation and maximum length,
- @pstrndup() - duplicate a string with maximum length,
- @pstrput() - securely set an allocated string into a pointer,
- @pstrrender() - dynamically render a string with placeholder substitution,
- @pstrreplace() - dynamically replace substrings within string,
- @pstrrtrim() - remove trailing whitespace,
- @pstrsplit() - dynamic tokenizer,
- @pstrtrim() - remove prefixing and trailing whitespace,
- @pstrupr() - convert string to lower-case-order.
-

Additionally, the following pendants for wide-character strings (wchar_t) exist and are available, when libphorward is compiled with the UNICODE flag enabled.

- @pwcscatchar() - append character to wide-character string with dynamic allocation,
- @pwcscatstr() - append wide-character string to wide-character string with dynamic allocation,
- @pwcsdup() - duplicate wide-character string, also accepts NULL-pointers,
- @pwcsget() - securely get wide-character string from a pointer,
- @pwcslen() - return length ot wide-character string, also accepts NULL-pointers,
- @pwcsncatstr() - append wide-character string to wide-character string with dynamic allocation and maximum length,
- @pwcsndup() - duplicate a wide-character string with maximum length,
- @pwcsput() - securely set an allocated wide-character string into a pointer.
-

Although the wide-character pendants to the standard extended string functions are not consistent right now, they may be extended in the future, when the existence of such functions is needed, or another, brave programmer is having the fun to implement them.


%-------------------------------------------------------------------------------

= Function reference =

%!include: ref.t2t

