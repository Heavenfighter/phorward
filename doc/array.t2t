


=== Overview ===

The parray object is a general-purpose data structure which can be used for several operations.

parray forms a data management container for handling homogeneous elements of the same size in a dynamic way. These elements can be atomic data types, pointers or structures. Elements are automatically allocated within a specified chunk-size, and can be appended or prepended to the given parray object.

The parray object implements:

- dynamic stack functions
- data object collections
- set functions (unions, diffs)
-

The parray object brings the following advantages and disadvantages:

- __Advantages__
  - Chunk allocation requires lesser @pmalloc()/@prealloc() operations than with plist-objects
  - Dynamic and quick implementation for huge data structures
  - Elements are held in a real array on the heap
  - Low memory consumption
  - Fast iteration over elements
  -
- __Disadvantages__
  - No hashable entries
  - Not as flexible as plist; especially element rearrangement requires more care
  - Removing elements or rechaining requires more computing power
  - Careful programming necessary, problems with lost pointers may be
    encountered after memory-reallocations!
  -
-

=== Construction and destruction ===

parray objects are created using @parray_create() or initialized with @parray_init(). The specific functions require the objects byte size that is required for every single element, and a chunk-size. Latter one can be omitted by specifing a chunk-size of 0, so that 128 elements per chunk will be the default. Objects can be cleared with @parray_erase(), respectively cleared and freed with @parray_free().

```
parray* a;

a = parray_create( sizeof( usertype ), 0 );

/* Do something... */

parray_free( a );
```

$NEWPAGE$
=== Inserting elements ===

Elements can be inserted with

- @parray_insert() - insert element at any desired offset,
- @parray_push() - push element to end of array,
- @parray_shift() - shift element on begin of array,
- @parray_malloc() - zero-initialize new element at end of array, and
- @parray_rmalloc() - zero-initialize new element at begin of array.
-

```
parray* a;
usertype t;
usertype* tp;

fill_usertype( &t );
parray_insert( a, 2, &t );

fill_usertype( &t );
parray_push( a, &t );
parray_shift( a, &t );

tp = (usertype*)parray_malloc( a );
fill_usertype( tp );
tp = (usertype*)parray_rmalloc( a );
fill_usertype( tp );
```

=== Accessing and iterating over elements ===

Direct access to specific elements is done using

- @parray_get() - get element by offset from begin, and
- @parray_rget() - get element by offset from end.
- @parray_for() - Expands into a for-loop iterating over elements.
- @parray_iter() - Iterate over all elements and call a function on each element.
- @parray_riter() - Like @parray_iter(), but backwards.
-

Iterating over the elements:

```
parray* a;
usertype* tp;

/* Using a pointer ---------------------------------------------------------- */

for( tp = parray_first( a ); tp; tp = parray_next( a, tp ) )
	;

/* Shortcut */
parray_for( a, tp )
	;

/* Using a callback function ------------------------------------------------ */

void tp_callback( parray* a, usertype* tp )
{
	/* ... */
}

parray_iter( a, (parrayfn)tp_callback ); /* Forwards... */
parray_riter( a, (parrayfn)tp_callback ); /* Backwards... */

/* Using a counter ---------------------------------------------------------- */
int i;

/* Iterate from first to last. */
for( i = 0; ( tp = (usertype*)parray_get( a, i ) ); i++ )
	;

/* Iterate from last to first. */
for( i = 0; ( tp = (usertype*)parray_rget( a, i ) ); i++ )
	;
```

Quick access to the first or last element is gained by @parray_last() and @parray_first().

To get a predecessor or successor of an element, use @parray_prev() respectively @parray_next().

Elements can be replaced by @parray_put() and @parray_rput() via their index.

=== Removing elements ===

Elements can be removed with

- @parray_remove() - remove element at any desired offset,
- @parray_pop() - remove last element like from a stack, and
- @parray_unshift() - remove first element.
-

```
parray* a;
usertype t;
usertype* tp;

parray_remove( a, 2, &t );
tp = (usertype*)parray_pop( a );
tp = (usertype*)parray_unshift( a );
```

=== Sorting elements ===

parray objects provide a sorting automatism, so that elements can be sorted on demand.

The sorting order and rule is defined using an element comparison callback-function, which returns element lower, greater or equality like memcmp() does.

This function can be individually set using @parray_set_sortfn(), and by default points to a callback function that uses memcmp() as the element comparison function.

As prototype and example, the following comparison function:
```
int my_compare( parray* a, usertype* p, usertype* q )
{
	if( p < q )
		return -1;
	else if( p > q )
		return 1;

	return 0;
}
```

This function can then be attached to an parray object with

``` parray_set_sortfn( a, my_compare );

Sorting can be performed by invoking the functions

- @parray_sort() - to sort the entire array,
- @parray_subsort() - to sort only a part of the array (begin- and end-elements required).
-

The used algorithm is quick-sort.


=== Interchanging functions ===

parray objects also provide functions to handle data collections and sets, by providing functions that can deal with two objects of kind parray. Both arrays must be configured with the same element memory size, else all functions will fail.

To implement these functions, every parray object also refers to a comparison-callback function. This is, by default, the same function as used for the sorting, and has also the same signature. This function can be implemented to check for element equality within set handling functions.

- @parray_diff() - checks two arrays for same items (equality),
- @parray_union() - extends an array to all elements of a secondary array that are not equal within the first array.
-

$NEWPAGE$
=== Additional functions ===

Other, useful functions are

- @parray_count() - get number of elements within object,
- @parray_offset() - get offset of element by pointer,
- @parray_partof() - check if element is part of object,
- @parray_swap() - swap two elements within an object,
- @parray_reserve() - assume memory pre-allocation; This is interesting for stack operations.
-
